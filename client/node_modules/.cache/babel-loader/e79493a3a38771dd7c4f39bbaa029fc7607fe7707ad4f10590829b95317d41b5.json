{"ast":null,"code":"var _jsxFileName = \"C:\\\\Users\\\\golun\\\\TimeTracker\\\\client\\\\src\\\\pages\\\\Dashboard.js\",\n  _s = $RefreshSig$();\nimport React, { useState, useEffect } from 'react';\nimport { Box, Card, CardContent, Grid, Typography, MenuItem, TextField, CircularProgress, Alert } from '@mui/material';\nimport { BarChart, Bar, PieChart, Pie, Cell, XAxis, YAxis, CartesianGrid, Tooltip, Legend, ResponsiveContainer, HeatMap } from 'recharts';\nimport { startOfWeek, startOfMonth, startOfQuarter, startOfYear, format } from 'date-fns';\nimport axios from 'axios';\nimport { jsxDEV as _jsxDEV } from \"react/jsx-dev-runtime\";\nconst COLORS = ['#0088FE', '#00C49F', '#FFBB28', '#FF8042', '#8884D8'];\nconst timeRanges = [{\n  value: 'week',\n  label: 'This Week'\n}, {\n  value: 'month',\n  label: 'This Month'\n}, {\n  value: 'quarter',\n  label: 'This Quarter'\n}, {\n  value: 'year',\n  label: 'This Year'\n}, {\n  value: 'all',\n  label: 'All Time'\n}];\nfunction Dashboard() {\n  _s();\n  const [timeRange, setTimeRange] = useState('month');\n  const [projectData, setProjectData] = useState([]);\n  const [userData, setUserData] = useState([]);\n  const [clientTypeData, setClientTypeData] = useState([]);\n  const [loading, setLoading] = useState(true);\n  const [error, setError] = useState(null);\n  const getDateRange = () => {\n    const now = new Date();\n    let startDate;\n    switch (timeRange) {\n      case 'week':\n        startDate = startOfWeek(now);\n        break;\n      case 'month':\n        startDate = startOfMonth(now);\n        break;\n      case 'quarter':\n        startDate = startOfQuarter(now);\n        break;\n      case 'year':\n        startDate = startOfYear(now);\n        break;\n      default:\n        startDate = null;\n    }\n    return {\n      startDate: startDate ? format(startDate, 'yyyy-MM-dd') : null,\n      endDate: format(now, 'yyyy-MM-dd')\n    };\n  };\n  const fetchData = async () => {\n    try {\n      setLoading(true);\n      setError(null);\n      const {\n        startDate,\n        endDate\n      } = getDateRange();\n      const dateParams = startDate ? `?startDate=${startDate}&endDate=${endDate}` : '';\n      console.log('Fetching analytics data with params:', {\n        startDate,\n        endDate\n      });\n      const [projectRes, userRes, clientTypeRes] = await Promise.all([axios.get(`/api/analytics/time-by-project${dateParams}`), axios.get(`/api/analytics/time-by-user${dateParams}`), axios.get(`/api/analytics/time-by-client-type${dateParams}`)]);\n      console.log('Project data:', projectRes.data);\n      console.log('User data:', userRes.data);\n      console.log('Client type data:', clientTypeRes.data);\n      setProjectData(projectRes.data);\n      setUserData(userRes.data);\n      setClientTypeData(clientTypeRes.data);\n    } catch (err) {\n      console.error('Error fetching analytics:', err);\n      setError('Failed to fetch analytics data. Please try again.');\n    } finally {\n      setLoading(false);\n    }\n  };\n  useEffect(() => {\n    fetchData();\n  }, [timeRange]);\n  const formatHours = hours => {\n    return Math.round(hours * 100) / 100;\n  };\n\n  // Prepare data for heatmap\n  // userData: [{user_id, user_name, project_name, total_hours, ...}]\n  const users = Array.from(new Set(userData.map(d => d.user_name)));\n  const projects = Array.from(new Set(userData.map(d => d.project_name)));\n  // Build a matrix: rows = projects, cols = users\n  const heatMapData = projects.map(project => users.map(user => {\n    const found = userData.find(d => d.user_name === user && d.project_name === project);\n    return found ? found.total_hours : 0;\n  }));\n\n  // Set column width for heatmap (wider for wrapped names)\n  const colWidth = 100;\n  const cellWidth = 95;\n  const cellHeight = 35;\n  const xOffset = 100;\n  const yOffset = 60;\n  if (loading) {\n    return /*#__PURE__*/_jsxDEV(Box, {\n      display: \"flex\",\n      justifyContent: \"center\",\n      alignItems: \"center\",\n      minHeight: \"60vh\",\n      children: /*#__PURE__*/_jsxDEV(CircularProgress, {}, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 135,\n        columnNumber: 9\n      }, this)\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 134,\n      columnNumber: 7\n    }, this);\n  }\n  return /*#__PURE__*/_jsxDEV(Box, {\n    children: [/*#__PURE__*/_jsxDEV(Box, {\n      sx: {\n        display: 'flex',\n        justifyContent: 'space-between',\n        mb: 3\n      },\n      children: [/*#__PURE__*/_jsxDEV(Typography, {\n        variant: \"h4\",\n        children: \"Dashboard\"\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 143,\n        columnNumber: 9\n      }, this), /*#__PURE__*/_jsxDEV(TextField, {\n        select: true,\n        value: timeRange,\n        onChange: e => setTimeRange(e.target.value),\n        sx: {\n          minWidth: 200\n        },\n        children: timeRanges.map(option => /*#__PURE__*/_jsxDEV(MenuItem, {\n          value: option.value,\n          children: option.label\n        }, option.value, false, {\n          fileName: _jsxFileName,\n          lineNumber: 151,\n          columnNumber: 13\n        }, this))\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 144,\n        columnNumber: 9\n      }, this)]\n    }, void 0, true, {\n      fileName: _jsxFileName,\n      lineNumber: 142,\n      columnNumber: 7\n    }, this), error && /*#__PURE__*/_jsxDEV(Alert, {\n      severity: \"error\",\n      sx: {\n        mb: 2\n      },\n      children: error\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 159,\n      columnNumber: 9\n    }, this), /*#__PURE__*/_jsxDEV(Grid, {\n      container: true,\n      spacing: 3,\n      children: [/*#__PURE__*/_jsxDEV(Grid, {\n        item: true,\n        xs: 12,\n        md: 6,\n        children: /*#__PURE__*/_jsxDEV(Card, {\n          children: /*#__PURE__*/_jsxDEV(CardContent, {\n            children: [/*#__PURE__*/_jsxDEV(Typography, {\n              variant: \"h6\",\n              gutterBottom: true,\n              children: \"Hours by Project\"\n            }, void 0, false, {\n              fileName: _jsxFileName,\n              lineNumber: 169,\n              columnNumber: 15\n            }, this), /*#__PURE__*/_jsxDEV(Box, {\n              sx: {\n                height: 300\n              },\n              children: projectData.length > 0 ? /*#__PURE__*/_jsxDEV(ResponsiveContainer, {\n                children: /*#__PURE__*/_jsxDEV(BarChart, {\n                  data: projectData,\n                  children: [/*#__PURE__*/_jsxDEV(CartesianGrid, {\n                    strokeDasharray: \"3 3\"\n                  }, void 0, false, {\n                    fileName: _jsxFileName,\n                    lineNumber: 176,\n                    columnNumber: 23\n                  }, this), /*#__PURE__*/_jsxDEV(XAxis, {\n                    dataKey: \"project_name\"\n                  }, void 0, false, {\n                    fileName: _jsxFileName,\n                    lineNumber: 177,\n                    columnNumber: 23\n                  }, this), /*#__PURE__*/_jsxDEV(YAxis, {}, void 0, false, {\n                    fileName: _jsxFileName,\n                    lineNumber: 178,\n                    columnNumber: 23\n                  }, this), /*#__PURE__*/_jsxDEV(Tooltip, {\n                    formatter: value => formatHours(value) + ' hours'\n                  }, void 0, false, {\n                    fileName: _jsxFileName,\n                    lineNumber: 179,\n                    columnNumber: 23\n                  }, this), /*#__PURE__*/_jsxDEV(Legend, {}, void 0, false, {\n                    fileName: _jsxFileName,\n                    lineNumber: 180,\n                    columnNumber: 23\n                  }, this), /*#__PURE__*/_jsxDEV(Bar, {\n                    dataKey: \"total_hours\",\n                    fill: \"#0088FE\",\n                    name: \"Hours\"\n                  }, void 0, false, {\n                    fileName: _jsxFileName,\n                    lineNumber: 181,\n                    columnNumber: 23\n                  }, this)]\n                }, void 0, true, {\n                  fileName: _jsxFileName,\n                  lineNumber: 175,\n                  columnNumber: 21\n                }, this)\n              }, void 0, false, {\n                fileName: _jsxFileName,\n                lineNumber: 174,\n                columnNumber: 19\n              }, this) : /*#__PURE__*/_jsxDEV(Box, {\n                display: \"flex\",\n                justifyContent: \"center\",\n                alignItems: \"center\",\n                height: \"100%\",\n                children: /*#__PURE__*/_jsxDEV(Typography, {\n                  color: \"text.secondary\",\n                  children: \"No project data available\"\n                }, void 0, false, {\n                  fileName: _jsxFileName,\n                  lineNumber: 186,\n                  columnNumber: 21\n                }, this)\n              }, void 0, false, {\n                fileName: _jsxFileName,\n                lineNumber: 185,\n                columnNumber: 19\n              }, this)\n            }, void 0, false, {\n              fileName: _jsxFileName,\n              lineNumber: 172,\n              columnNumber: 15\n            }, this)]\n          }, void 0, true, {\n            fileName: _jsxFileName,\n            lineNumber: 168,\n            columnNumber: 13\n          }, this)\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 167,\n          columnNumber: 11\n        }, this)\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 166,\n        columnNumber: 9\n      }, this), /*#__PURE__*/_jsxDEV(Grid, {\n        item: true,\n        xs: 12,\n        md: 6,\n        children: /*#__PURE__*/_jsxDEV(Card, {\n          children: /*#__PURE__*/_jsxDEV(CardContent, {\n            children: [/*#__PURE__*/_jsxDEV(Typography, {\n              variant: \"h6\",\n              gutterBottom: true,\n              children: \"Internal vs External Hours\"\n            }, void 0, false, {\n              fileName: _jsxFileName,\n              lineNumber: 198,\n              columnNumber: 15\n            }, this), /*#__PURE__*/_jsxDEV(Box, {\n              sx: {\n                height: 300\n              },\n              children: clientTypeData.length > 0 ? /*#__PURE__*/_jsxDEV(ResponsiveContainer, {\n                children: /*#__PURE__*/_jsxDEV(PieChart, {\n                  children: [/*#__PURE__*/_jsxDEV(Pie, {\n                    data: clientTypeData,\n                    dataKey: \"total_hours\",\n                    nameKey: \"client_type\",\n                    cx: \"50%\",\n                    cy: \"50%\",\n                    outerRadius: 100,\n                    label: ({\n                      client_type,\n                      total_hours\n                    }) => `${client_type}: ${formatHours(total_hours)}h`,\n                    children: clientTypeData.map((entry, index) => /*#__PURE__*/_jsxDEV(Cell, {\n                      fill: COLORS[index % COLORS.length]\n                    }, entry.client_type, false, {\n                      fileName: _jsxFileName,\n                      lineNumber: 217,\n                      columnNumber: 27\n                    }, this))\n                  }, void 0, false, {\n                    fileName: _jsxFileName,\n                    lineNumber: 205,\n                    columnNumber: 23\n                  }, this), /*#__PURE__*/_jsxDEV(Tooltip, {\n                    formatter: value => formatHours(value) + ' hours'\n                  }, void 0, false, {\n                    fileName: _jsxFileName,\n                    lineNumber: 220,\n                    columnNumber: 23\n                  }, this), /*#__PURE__*/_jsxDEV(Legend, {}, void 0, false, {\n                    fileName: _jsxFileName,\n                    lineNumber: 221,\n                    columnNumber: 23\n                  }, this)]\n                }, void 0, true, {\n                  fileName: _jsxFileName,\n                  lineNumber: 204,\n                  columnNumber: 21\n                }, this)\n              }, void 0, false, {\n                fileName: _jsxFileName,\n                lineNumber: 203,\n                columnNumber: 19\n              }, this) : /*#__PURE__*/_jsxDEV(Box, {\n                display: \"flex\",\n                justifyContent: \"center\",\n                alignItems: \"center\",\n                height: \"100%\",\n                children: /*#__PURE__*/_jsxDEV(Typography, {\n                  color: \"text.secondary\",\n                  children: \"No client type data available\"\n                }, void 0, false, {\n                  fileName: _jsxFileName,\n                  lineNumber: 226,\n                  columnNumber: 21\n                }, this)\n              }, void 0, false, {\n                fileName: _jsxFileName,\n                lineNumber: 225,\n                columnNumber: 19\n              }, this)\n            }, void 0, false, {\n              fileName: _jsxFileName,\n              lineNumber: 201,\n              columnNumber: 15\n            }, this)]\n          }, void 0, true, {\n            fileName: _jsxFileName,\n            lineNumber: 197,\n            columnNumber: 13\n          }, this)\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 196,\n          columnNumber: 11\n        }, this)\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 195,\n        columnNumber: 9\n      }, this), /*#__PURE__*/_jsxDEV(Grid, {\n        item: true,\n        xs: 12,\n        children: /*#__PURE__*/_jsxDEV(Card, {\n          children: /*#__PURE__*/_jsxDEV(CardContent, {\n            children: [/*#__PURE__*/_jsxDEV(Typography, {\n              variant: \"h6\",\n              gutterBottom: true,\n              children: \"Hours by User and Project (Heat Map)\"\n            }, void 0, false, {\n              fileName: _jsxFileName,\n              lineNumber: 238,\n              columnNumber: 15\n            }, this), /*#__PURE__*/_jsxDEV(Box, {\n              sx: {\n                height: 400\n              },\n              children: userData.length > 0 ? /*#__PURE__*/_jsxDEV(ResponsiveContainer, {\n                width: \"100%\",\n                height: \"100%\",\n                children: /*#__PURE__*/_jsxDEV(\"svg\", {\n                  width: \"100%\",\n                  height: \"100%\",\n                  viewBox: `0 0 ${users.length * colWidth + 100} ${projects.length * cellHeight + 100}`,\n                  children: [users.map((user, i) => {\n                    const words = user.split(' ');\n                    const lineHeight = 18;\n                    // The last line should be at y=55, so the first line is at y=55 - (words.length-1)*lineHeight\n                    const startY = 55 - (words.length - 1) * lineHeight;\n                    return /*#__PURE__*/_jsxDEV(\"text\", {\n                      x: i * colWidth + xOffset + cellWidth / 2,\n                      y: startY,\n                      textAnchor: \"middle\",\n                      fontSize: \"14\",\n                      children: words.map((word, idx) => /*#__PURE__*/_jsxDEV(\"tspan\", {\n                        x: i * colWidth + xOffset + cellWidth / 2,\n                        dy: idx === 0 ? 0 : lineHeight,\n                        children: word\n                      }, word + idx, false, {\n                        fileName: _jsxFileName,\n                        lineNumber: 261,\n                        columnNumber: 31\n                      }, this))\n                    }, user, false, {\n                      fileName: _jsxFileName,\n                      lineNumber: 253,\n                      columnNumber: 27\n                    }, this);\n                  }), projects.map((project, j) => /*#__PURE__*/_jsxDEV(\"text\", {\n                    x: xOffset - 20,\n                    y: j * cellHeight + yOffset + cellHeight / 2,\n                    textAnchor: \"end\",\n                    fontSize: \"14\",\n                    alignmentBaseline: \"middle\",\n                    children: project\n                  }, project, false, {\n                    fileName: _jsxFileName,\n                    lineNumber: 274,\n                    columnNumber: 25\n                  }, this)), heatMapData.map((row, j) => row.map((value, i) => {\n                    // Color scale: 0 = #f0f0f0, max = #1976d2\n                    const max = Math.max(...heatMapData.flat());\n                    const min = 0;\n                    const percent = max === min ? 0 : (value - min) / (max - min);\n                    const color = `rgb(${240 - percent * 63}, ${240 - percent * 111}, ${240 - percent * 210})`;\n                    return /*#__PURE__*/_jsxDEV(\"g\", {\n                      children: [/*#__PURE__*/_jsxDEV(\"rect\", {\n                        x: i * colWidth + xOffset,\n                        y: j * cellHeight + yOffset,\n                        width: cellWidth,\n                        height: cellHeight,\n                        fill: color,\n                        stroke: \"#ccc\"\n                      }, void 0, false, {\n                        fileName: _jsxFileName,\n                        lineNumber: 286,\n                        columnNumber: 31\n                      }, this), /*#__PURE__*/_jsxDEV(\"text\", {\n                        x: i * colWidth + xOffset + cellWidth / 2,\n                        y: j * cellHeight + yOffset + cellHeight / 2,\n                        textAnchor: \"middle\",\n                        alignmentBaseline: \"middle\",\n                        fontSize: \"16\",\n                        fill: value > max / 2 ? '#fff' : '#333',\n                        children: value > 0 ? formatHours(value) : ''\n                      }, void 0, false, {\n                        fileName: _jsxFileName,\n                        lineNumber: 294,\n                        columnNumber: 31\n                      }, this)]\n                    }, i + '-' + j, true, {\n                      fileName: _jsxFileName,\n                      lineNumber: 285,\n                      columnNumber: 29\n                    }, this);\n                  }))]\n                }, void 0, true, {\n                  fileName: _jsxFileName,\n                  lineNumber: 245,\n                  columnNumber: 21\n                }, this)\n              }, void 0, false, {\n                fileName: _jsxFileName,\n                lineNumber: 243,\n                columnNumber: 19\n              }, this) : /*#__PURE__*/_jsxDEV(Box, {\n                display: \"flex\",\n                justifyContent: \"center\",\n                alignItems: \"center\",\n                height: \"100%\",\n                children: /*#__PURE__*/_jsxDEV(Typography, {\n                  color: \"text.secondary\",\n                  children: \"No user/project data available\"\n                }, void 0, false, {\n                  fileName: _jsxFileName,\n                  lineNumber: 312,\n                  columnNumber: 21\n                }, this)\n              }, void 0, false, {\n                fileName: _jsxFileName,\n                lineNumber: 311,\n                columnNumber: 19\n              }, this)\n            }, void 0, false, {\n              fileName: _jsxFileName,\n              lineNumber: 241,\n              columnNumber: 15\n            }, this)]\n          }, void 0, true, {\n            fileName: _jsxFileName,\n            lineNumber: 237,\n            columnNumber: 13\n          }, this)\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 236,\n          columnNumber: 11\n        }, this)\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 235,\n        columnNumber: 9\n      }, this)]\n    }, void 0, true, {\n      fileName: _jsxFileName,\n      lineNumber: 164,\n      columnNumber: 7\n    }, this)]\n  }, void 0, true, {\n    fileName: _jsxFileName,\n    lineNumber: 141,\n    columnNumber: 5\n  }, this);\n}\n_s(Dashboard, \"pvc6T4iQsi8IUlMQTdQnzxqarak=\");\n_c = Dashboard;\nexport default Dashboard;\nvar _c;\n$RefreshReg$(_c, \"Dashboard\");","map":{"version":3,"names":["React","useState","useEffect","Box","Card","CardContent","Grid","Typography","MenuItem","TextField","CircularProgress","Alert","BarChart","Bar","PieChart","Pie","Cell","XAxis","YAxis","CartesianGrid","Tooltip","Legend","ResponsiveContainer","HeatMap","startOfWeek","startOfMonth","startOfQuarter","startOfYear","format","axios","jsxDEV","_jsxDEV","COLORS","timeRanges","value","label","Dashboard","_s","timeRange","setTimeRange","projectData","setProjectData","userData","setUserData","clientTypeData","setClientTypeData","loading","setLoading","error","setError","getDateRange","now","Date","startDate","endDate","fetchData","dateParams","console","log","projectRes","userRes","clientTypeRes","Promise","all","get","data","err","formatHours","hours","Math","round","users","Array","from","Set","map","d","user_name","projects","project_name","heatMapData","project","user","found","find","total_hours","colWidth","cellWidth","cellHeight","xOffset","yOffset","display","justifyContent","alignItems","minHeight","children","fileName","_jsxFileName","lineNumber","columnNumber","sx","mb","variant","select","onChange","e","target","minWidth","option","severity","container","spacing","item","xs","md","gutterBottom","height","length","strokeDasharray","dataKey","formatter","fill","name","color","nameKey","cx","cy","outerRadius","client_type","entry","index","width","viewBox","i","words","split","lineHeight","startY","x","y","textAnchor","fontSize","word","idx","dy","j","alignmentBaseline","row","max","flat","min","percent","stroke","_c","$RefreshReg$"],"sources":["C:/Users/golun/TimeTracker/client/src/pages/Dashboard.js"],"sourcesContent":["import React, { useState, useEffect } from 'react';\r\nimport {\r\n  Box,\r\n  Card,\r\n  CardContent,\r\n  Grid,\r\n  Typography,\r\n  MenuItem,\r\n  TextField,\r\n  CircularProgress,\r\n  Alert,\r\n} from '@mui/material';\r\nimport {\r\n  BarChart,\r\n  Bar,\r\n  PieChart,\r\n  Pie,\r\n  Cell,\r\n  XAxis,\r\n  YAxis,\r\n  CartesianGrid,\r\n  Tooltip,\r\n  Legend,\r\n  ResponsiveContainer,\r\n  HeatMap,\r\n} from 'recharts';\r\nimport { startOfWeek, startOfMonth, startOfQuarter, startOfYear, format } from 'date-fns';\r\nimport axios from 'axios';\r\n\r\nconst COLORS = ['#0088FE', '#00C49F', '#FFBB28', '#FF8042', '#8884D8'];\r\n\r\nconst timeRanges = [\r\n  { value: 'week', label: 'This Week' },\r\n  { value: 'month', label: 'This Month' },\r\n  { value: 'quarter', label: 'This Quarter' },\r\n  { value: 'year', label: 'This Year' },\r\n  { value: 'all', label: 'All Time' },\r\n];\r\n\r\nfunction Dashboard() {\r\n  const [timeRange, setTimeRange] = useState('month');\r\n  const [projectData, setProjectData] = useState([]);\r\n  const [userData, setUserData] = useState([]);\r\n  const [clientTypeData, setClientTypeData] = useState([]);\r\n  const [loading, setLoading] = useState(true);\r\n  const [error, setError] = useState(null);\r\n\r\n  const getDateRange = () => {\r\n    const now = new Date();\r\n    let startDate;\r\n\r\n    switch (timeRange) {\r\n      case 'week':\r\n        startDate = startOfWeek(now);\r\n        break;\r\n      case 'month':\r\n        startDate = startOfMonth(now);\r\n        break;\r\n      case 'quarter':\r\n        startDate = startOfQuarter(now);\r\n        break;\r\n      case 'year':\r\n        startDate = startOfYear(now);\r\n        break;\r\n      default:\r\n        startDate = null;\r\n    }\r\n\r\n    return {\r\n      startDate: startDate ? format(startDate, 'yyyy-MM-dd') : null,\r\n      endDate: format(now, 'yyyy-MM-dd'),\r\n    };\r\n  };\r\n\r\n  const fetchData = async () => {\r\n    try {\r\n      setLoading(true);\r\n      setError(null);\r\n      const { startDate, endDate } = getDateRange();\r\n      const dateParams = startDate ? `?startDate=${startDate}&endDate=${endDate}` : '';\r\n\r\n      console.log('Fetching analytics data with params:', { startDate, endDate });\r\n\r\n      const [projectRes, userRes, clientTypeRes] = await Promise.all([\r\n        axios.get(`/api/analytics/time-by-project${dateParams}`),\r\n        axios.get(`/api/analytics/time-by-user${dateParams}`),\r\n        axios.get(`/api/analytics/time-by-client-type${dateParams}`),\r\n      ]);\r\n\r\n      console.log('Project data:', projectRes.data);\r\n      console.log('User data:', userRes.data);\r\n      console.log('Client type data:', clientTypeRes.data);\r\n\r\n      setProjectData(projectRes.data);\r\n      setUserData(userRes.data);\r\n      setClientTypeData(clientTypeRes.data);\r\n    } catch (err) {\r\n      console.error('Error fetching analytics:', err);\r\n      setError('Failed to fetch analytics data. Please try again.');\r\n    } finally {\r\n      setLoading(false);\r\n    }\r\n  };\r\n\r\n  useEffect(() => {\r\n    fetchData();\r\n  }, [timeRange]);\r\n\r\n  const formatHours = (hours) => {\r\n    return Math.round(hours * 100) / 100;\r\n  };\r\n\r\n  // Prepare data for heatmap\r\n  // userData: [{user_id, user_name, project_name, total_hours, ...}]\r\n  const users = Array.from(new Set(userData.map(d => d.user_name)));\r\n  const projects = Array.from(new Set(userData.map(d => d.project_name)));\r\n  // Build a matrix: rows = projects, cols = users\r\n  const heatMapData = projects.map(project =>\r\n    users.map(user => {\r\n      const found = userData.find(d => d.user_name === user && d.project_name === project);\r\n      return found ? found.total_hours : 0;\r\n    })\r\n  );\r\n\r\n  // Set column width for heatmap (wider for wrapped names)\r\n  const colWidth = 100;\r\n  const cellWidth = 95;\r\n  const cellHeight = 35;\r\n  const xOffset = 100;\r\n  const yOffset = 60;\r\n\r\n  if (loading) {\r\n    return (\r\n      <Box display=\"flex\" justifyContent=\"center\" alignItems=\"center\" minHeight=\"60vh\">\r\n        <CircularProgress />\r\n      </Box>\r\n    );\r\n  }\r\n\r\n  return (\r\n    <Box>\r\n      <Box sx={{ display: 'flex', justifyContent: 'space-between', mb: 3 }}>\r\n        <Typography variant=\"h4\">Dashboard</Typography>\r\n        <TextField\r\n          select\r\n          value={timeRange}\r\n          onChange={(e) => setTimeRange(e.target.value)}\r\n          sx={{ minWidth: 200 }}\r\n        >\r\n          {timeRanges.map((option) => (\r\n            <MenuItem key={option.value} value={option.value}>\r\n              {option.label}\r\n            </MenuItem>\r\n          ))}\r\n        </TextField>\r\n      </Box>\r\n\r\n      {error && (\r\n        <Alert severity=\"error\" sx={{ mb: 2 }}>\r\n          {error}\r\n        </Alert>\r\n      )}\r\n\r\n      <Grid container spacing={3}>\r\n        {/* Project Hours */}\r\n        <Grid item xs={12} md={6}>\r\n          <Card>\r\n            <CardContent>\r\n              <Typography variant=\"h6\" gutterBottom>\r\n                Hours by Project\r\n              </Typography>\r\n              <Box sx={{ height: 300 }}>\r\n                {projectData.length > 0 ? (\r\n                  <ResponsiveContainer>\r\n                    <BarChart data={projectData}>\r\n                      <CartesianGrid strokeDasharray=\"3 3\" />\r\n                      <XAxis dataKey=\"project_name\" />\r\n                      <YAxis />\r\n                      <Tooltip formatter={(value) => formatHours(value) + ' hours'} />\r\n                      <Legend />\r\n                      <Bar dataKey=\"total_hours\" fill=\"#0088FE\" name=\"Hours\" />\r\n                    </BarChart>\r\n                  </ResponsiveContainer>\r\n                ) : (\r\n                  <Box display=\"flex\" justifyContent=\"center\" alignItems=\"center\" height=\"100%\">\r\n                    <Typography color=\"text.secondary\">No project data available</Typography>\r\n                  </Box>\r\n                )}\r\n              </Box>\r\n            </CardContent>\r\n          </Card>\r\n        </Grid>\r\n\r\n        {/* Client Type Distribution */}\r\n        <Grid item xs={12} md={6}>\r\n          <Card>\r\n            <CardContent>\r\n              <Typography variant=\"h6\" gutterBottom>\r\n                Internal vs External Hours\r\n              </Typography>\r\n              <Box sx={{ height: 300 }}>\r\n                {clientTypeData.length > 0 ? (\r\n                  <ResponsiveContainer>\r\n                    <PieChart>\r\n                      <Pie\r\n                        data={clientTypeData}\r\n                        dataKey=\"total_hours\"\r\n                        nameKey=\"client_type\"\r\n                        cx=\"50%\"\r\n                        cy=\"50%\"\r\n                        outerRadius={100}\r\n                        label={({ client_type, total_hours }) => \r\n                          `${client_type}: ${formatHours(total_hours)}h`\r\n                        }\r\n                      >\r\n                        {clientTypeData.map((entry, index) => (\r\n                          <Cell key={entry.client_type} fill={COLORS[index % COLORS.length]} />\r\n                        ))}\r\n                      </Pie>\r\n                      <Tooltip formatter={(value) => formatHours(value) + ' hours'} />\r\n                      <Legend />\r\n                    </PieChart>\r\n                  </ResponsiveContainer>\r\n                ) : (\r\n                  <Box display=\"flex\" justifyContent=\"center\" alignItems=\"center\" height=\"100%\">\r\n                    <Typography color=\"text.secondary\">No client type data available</Typography>\r\n                  </Box>\r\n                )}\r\n              </Box>\r\n            </CardContent>\r\n          </Card>\r\n        </Grid>\r\n\r\n        {/* User Hours as Heat Map */}\r\n        <Grid item xs={12}>\r\n          <Card>\r\n            <CardContent>\r\n              <Typography variant=\"h6\" gutterBottom>\r\n                Hours by User and Project (Heat Map)\r\n              </Typography>\r\n              <Box sx={{ height: 400 }}>\r\n                {userData.length > 0 ? (\r\n                  <ResponsiveContainer width=\"100%\" height=\"100%\">\r\n                    {/* recharts does not have a built-in HeatMap, so we use a custom SVG grid */}\r\n                    <svg width=\"100%\" height=\"100%\" viewBox={`0 0 ${users.length * colWidth + 100} ${projects.length * cellHeight + 100}`}>\r\n                      {/* X Axis (Users) */}\r\n                      {users.map((user, i) => {\r\n                        const words = user.split(' ');\r\n                        const lineHeight = 18;\r\n                        // The last line should be at y=55, so the first line is at y=55 - (words.length-1)*lineHeight\r\n                        const startY = 55 - (words.length - 1) * lineHeight;\r\n                        return (\r\n                          <text\r\n                            key={user}\r\n                            x={i * colWidth + xOffset + cellWidth / 2}\r\n                            y={startY}\r\n                            textAnchor=\"middle\"\r\n                            fontSize=\"14\"\r\n                          >\r\n                            {words.map((word, idx) => (\r\n                              <tspan\r\n                                key={word + idx}\r\n                                x={i * colWidth + xOffset + cellWidth / 2}\r\n                                dy={idx === 0 ? 0 : lineHeight}\r\n                              >\r\n                                {word}\r\n                              </tspan>\r\n                            ))}\r\n                          </text>\r\n                        );\r\n                      })}\r\n                      {/* Y Axis (Projects) */}\r\n                      {projects.map((project, j) => (\r\n                        <text key={project} x={xOffset - 20} y={j * cellHeight + yOffset + cellHeight / 2} textAnchor=\"end\" fontSize=\"14\" alignmentBaseline=\"middle\">{project}</text>\r\n                      ))}\r\n                      {/* Heatmap cells */}\r\n                      {heatMapData.map((row, j) =>\r\n                        row.map((value, i) => {\r\n                          // Color scale: 0 = #f0f0f0, max = #1976d2\r\n                          const max = Math.max(...heatMapData.flat());\r\n                          const min = 0;\r\n                          const percent = max === min ? 0 : (value - min) / (max - min);\r\n                          const color = `rgb(${240 - percent * 63}, ${240 - percent * 111}, ${240 - percent * 210})`;\r\n                          return (\r\n                            <g key={i + '-' + j}>\r\n                              <rect\r\n                                x={i * colWidth + xOffset}\r\n                                y={j * cellHeight + yOffset}\r\n                                width={cellWidth}\r\n                                height={cellHeight}\r\n                                fill={color}\r\n                                stroke=\"#ccc\"\r\n                              />\r\n                              <text\r\n                                x={i * colWidth + xOffset + cellWidth / 2}\r\n                                y={j * cellHeight + yOffset + cellHeight / 2}\r\n                                textAnchor=\"middle\"\r\n                                alignmentBaseline=\"middle\"\r\n                                fontSize=\"16\"\r\n                                fill={value > (max / 2) ? '#fff' : '#333'}\r\n                              >\r\n                                {value > 0 ? formatHours(value) : ''}\r\n                              </text>\r\n                            </g>\r\n                          );\r\n                        })\r\n                      )}\r\n                    </svg>\r\n                  </ResponsiveContainer>\r\n                ) : (\r\n                  <Box display=\"flex\" justifyContent=\"center\" alignItems=\"center\" height=\"100%\">\r\n                    <Typography color=\"text.secondary\">No user/project data available</Typography>\r\n                  </Box>\r\n                )}\r\n              </Box>\r\n            </CardContent>\r\n          </Card>\r\n        </Grid>\r\n      </Grid>\r\n    </Box>\r\n  );\r\n}\r\n\r\nexport default Dashboard; "],"mappings":"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","ignoreList":[]},"metadata":{},"sourceType":"module","externalDependencies":[]}