{"ast":null,"code":"var _jsxFileName = \"C:\\\\Users\\\\golun\\\\TimeTracker\\\\client\\\\src\\\\pages\\\\Dashboard.js\",\n  _s = $RefreshSig$();\nimport React, { useState, useEffect } from 'react';\nimport { Box, Card, CardContent, Grid, Typography, MenuItem, TextField, CircularProgress, Alert } from '@mui/material';\nimport { BarChart, Bar, PieChart, Pie, Cell, XAxis, YAxis, CartesianGrid, Tooltip, Legend, ResponsiveContainer } from 'recharts';\nimport { startOfWeek, startOfMonth, startOfQuarter, startOfYear, format } from 'date-fns';\nimport axios from 'axios';\nimport { jsxDEV as _jsxDEV } from \"react/jsx-dev-runtime\";\nconst COLORS = ['#0088FE', '#00C49F', '#FFBB28', '#FF8042', '#8884D8'];\nconst timeRanges = [{\n  value: 'week',\n  label: 'This Week'\n}, {\n  value: 'month',\n  label: 'This Month'\n}, {\n  value: 'quarter',\n  label: 'This Quarter'\n}, {\n  value: 'year',\n  label: 'This Year'\n}, {\n  value: 'all',\n  label: 'All Time'\n}];\nfunction Dashboard() {\n  _s();\n  const [timeRange, setTimeRange] = useState('month');\n  const [projectData, setProjectData] = useState([]);\n  const [userData, setUserData] = useState([]);\n  const [clientTypeData, setClientTypeData] = useState([]);\n  const [loading, setLoading] = useState(true);\n  const [error, setError] = useState(null);\n  const getDateRange = () => {\n    const now = new Date();\n    let startDate;\n    switch (timeRange) {\n      case 'week':\n        startDate = startOfWeek(now);\n        break;\n      case 'month':\n        startDate = startOfMonth(now);\n        break;\n      case 'quarter':\n        startDate = startOfQuarter(now);\n        break;\n      case 'year':\n        startDate = startOfYear(now);\n        break;\n      default:\n        startDate = null;\n    }\n    return {\n      startDate: startDate ? format(startDate, 'yyyy-MM-dd') : null,\n      endDate: format(now, 'yyyy-MM-dd')\n    };\n  };\n  const fetchData = async () => {\n    try {\n      setLoading(true);\n      setError(null);\n      const {\n        startDate,\n        endDate\n      } = getDateRange();\n      const dateParams = startDate ? `?startDate=${startDate}&endDate=${endDate}` : '';\n      console.log('Fetching analytics data with params:', {\n        startDate,\n        endDate\n      });\n      const [projectRes, userRes, clientTypeRes] = await Promise.all([axios.get(`http://localhost:3002/api/analytics/time-by-project${dateParams}`), axios.get(`http://localhost:3002/api/analytics/time-by-user${dateParams}`), axios.get(`http://localhost:3002/api/analytics/time-by-client-type${dateParams}`)]);\n      console.log('Project data:', projectRes.data);\n      console.log('User data:', userRes.data);\n      console.log('Client type data:', clientTypeRes.data);\n      setProjectData(projectRes.data);\n      setUserData(userRes.data);\n      setClientTypeData(clientTypeRes.data);\n    } catch (err) {\n      console.error('Error fetching analytics:', err);\n      setError('Failed to fetch analytics data. Please try again.');\n    } finally {\n      setLoading(false);\n    }\n  };\n  useEffect(() => {\n    fetchData();\n  }, [timeRange]);\n  const formatHours = hours => {\n    return Math.round(hours * 100) / 100;\n  };\n  if (loading) {\n    return /*#__PURE__*/_jsxDEV(Box, {\n      display: \"flex\",\n      justifyContent: \"center\",\n      alignItems: \"center\",\n      minHeight: \"60vh\",\n      children: /*#__PURE__*/_jsxDEV(CircularProgress, {}, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 115,\n        columnNumber: 9\n      }, this)\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 114,\n      columnNumber: 7\n    }, this);\n  }\n  return /*#__PURE__*/_jsxDEV(Box, {\n    children: [/*#__PURE__*/_jsxDEV(Box, {\n      sx: {\n        display: 'flex',\n        justifyContent: 'space-between',\n        mb: 3\n      },\n      children: [/*#__PURE__*/_jsxDEV(Typography, {\n        variant: \"h4\",\n        children: \"Dashboard\"\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 123,\n        columnNumber: 9\n      }, this), /*#__PURE__*/_jsxDEV(TextField, {\n        select: true,\n        value: timeRange,\n        onChange: e => setTimeRange(e.target.value),\n        sx: {\n          minWidth: 200\n        },\n        children: timeRanges.map(option => /*#__PURE__*/_jsxDEV(MenuItem, {\n          value: option.value,\n          children: option.label\n        }, option.value, false, {\n          fileName: _jsxFileName,\n          lineNumber: 131,\n          columnNumber: 13\n        }, this))\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 124,\n        columnNumber: 9\n      }, this)]\n    }, void 0, true, {\n      fileName: _jsxFileName,\n      lineNumber: 122,\n      columnNumber: 7\n    }, this), error && /*#__PURE__*/_jsxDEV(Alert, {\n      severity: \"error\",\n      sx: {\n        mb: 2\n      },\n      children: error\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 139,\n      columnNumber: 9\n    }, this), /*#__PURE__*/_jsxDEV(Grid, {\n      container: true,\n      spacing: 3,\n      children: [/*#__PURE__*/_jsxDEV(Grid, {\n        item: true,\n        xs: 12,\n        md: 6,\n        children: /*#__PURE__*/_jsxDEV(Card, {\n          children: /*#__PURE__*/_jsxDEV(CardContent, {\n            children: [/*#__PURE__*/_jsxDEV(Typography, {\n              variant: \"h6\",\n              gutterBottom: true,\n              children: \"Hours by Project\"\n            }, void 0, false, {\n              fileName: _jsxFileName,\n              lineNumber: 149,\n              columnNumber: 15\n            }, this), /*#__PURE__*/_jsxDEV(Box, {\n              sx: {\n                height: 300\n              },\n              children: /*#__PURE__*/_jsxDEV(ResponsiveContainer, {\n                children: /*#__PURE__*/_jsxDEV(BarChart, {\n                  data: projectData,\n                  children: [/*#__PURE__*/_jsxDEV(CartesianGrid, {\n                    strokeDasharray: \"3 3\"\n                  }, void 0, false, {\n                    fileName: _jsxFileName,\n                    lineNumber: 155,\n                    columnNumber: 21\n                  }, this), /*#__PURE__*/_jsxDEV(XAxis, {\n                    dataKey: \"project_name\"\n                  }, void 0, false, {\n                    fileName: _jsxFileName,\n                    lineNumber: 156,\n                    columnNumber: 21\n                  }, this), /*#__PURE__*/_jsxDEV(YAxis, {}, void 0, false, {\n                    fileName: _jsxFileName,\n                    lineNumber: 157,\n                    columnNumber: 21\n                  }, this), /*#__PURE__*/_jsxDEV(Tooltip, {\n                    formatter: value => formatHours(value) + ' hours'\n                  }, void 0, false, {\n                    fileName: _jsxFileName,\n                    lineNumber: 158,\n                    columnNumber: 21\n                  }, this), /*#__PURE__*/_jsxDEV(Legend, {}, void 0, false, {\n                    fileName: _jsxFileName,\n                    lineNumber: 159,\n                    columnNumber: 21\n                  }, this), /*#__PURE__*/_jsxDEV(Bar, {\n                    dataKey: \"total_hours\",\n                    fill: \"#0088FE\",\n                    name: \"Hours\"\n                  }, void 0, false, {\n                    fileName: _jsxFileName,\n                    lineNumber: 160,\n                    columnNumber: 21\n                  }, this)]\n                }, void 0, true, {\n                  fileName: _jsxFileName,\n                  lineNumber: 154,\n                  columnNumber: 19\n                }, this)\n              }, void 0, false, {\n                fileName: _jsxFileName,\n                lineNumber: 153,\n                columnNumber: 17\n              }, this)\n            }, void 0, false, {\n              fileName: _jsxFileName,\n              lineNumber: 152,\n              columnNumber: 15\n            }, this)]\n          }, void 0, true, {\n            fileName: _jsxFileName,\n            lineNumber: 148,\n            columnNumber: 13\n          }, this)\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 147,\n          columnNumber: 11\n        }, this)\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 146,\n        columnNumber: 9\n      }, this), /*#__PURE__*/_jsxDEV(Grid, {\n        item: true,\n        xs: 12,\n        md: 6,\n        children: /*#__PURE__*/_jsxDEV(Card, {\n          children: /*#__PURE__*/_jsxDEV(CardContent, {\n            children: [/*#__PURE__*/_jsxDEV(Typography, {\n              variant: \"h6\",\n              gutterBottom: true,\n              children: \"Internal vs External Hours\"\n            }, void 0, false, {\n              fileName: _jsxFileName,\n              lineNumber: 172,\n              columnNumber: 15\n            }, this), /*#__PURE__*/_jsxDEV(Box, {\n              sx: {\n                height: 300\n              },\n              children: /*#__PURE__*/_jsxDEV(ResponsiveContainer, {\n                children: /*#__PURE__*/_jsxDEV(PieChart, {\n                  children: [/*#__PURE__*/_jsxDEV(Pie, {\n                    data: clientTypeData,\n                    dataKey: \"total_hours\",\n                    nameKey: \"client_type\",\n                    cx: \"50%\",\n                    cy: \"50%\",\n                    outerRadius: 100,\n                    label: ({\n                      client_type,\n                      total_hours\n                    }) => `${client_type}: ${formatHours(total_hours)}h`,\n                    children: clientTypeData.map((entry, index) => /*#__PURE__*/_jsxDEV(Cell, {\n                      fill: COLORS[index % COLORS.length]\n                    }, entry.client_type, false, {\n                      fileName: _jsxFileName,\n                      lineNumber: 190,\n                      columnNumber: 25\n                    }, this))\n                  }, void 0, false, {\n                    fileName: _jsxFileName,\n                    lineNumber: 178,\n                    columnNumber: 21\n                  }, this), /*#__PURE__*/_jsxDEV(Tooltip, {\n                    formatter: value => formatHours(value) + ' hours'\n                  }, void 0, false, {\n                    fileName: _jsxFileName,\n                    lineNumber: 193,\n                    columnNumber: 21\n                  }, this), /*#__PURE__*/_jsxDEV(Legend, {}, void 0, false, {\n                    fileName: _jsxFileName,\n                    lineNumber: 194,\n                    columnNumber: 21\n                  }, this)]\n                }, void 0, true, {\n                  fileName: _jsxFileName,\n                  lineNumber: 177,\n                  columnNumber: 19\n                }, this)\n              }, void 0, false, {\n                fileName: _jsxFileName,\n                lineNumber: 176,\n                columnNumber: 17\n              }, this)\n            }, void 0, false, {\n              fileName: _jsxFileName,\n              lineNumber: 175,\n              columnNumber: 15\n            }, this)]\n          }, void 0, true, {\n            fileName: _jsxFileName,\n            lineNumber: 171,\n            columnNumber: 13\n          }, this)\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 170,\n          columnNumber: 11\n        }, this)\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 169,\n        columnNumber: 9\n      }, this), /*#__PURE__*/_jsxDEV(Grid, {\n        item: true,\n        xs: 12,\n        children: /*#__PURE__*/_jsxDEV(Card, {\n          children: /*#__PURE__*/_jsxDEV(CardContent, {\n            children: [/*#__PURE__*/_jsxDEV(Typography, {\n              variant: \"h6\",\n              gutterBottom: true,\n              children: \"Hours by User and Project\"\n            }, void 0, false, {\n              fileName: _jsxFileName,\n              lineNumber: 206,\n              columnNumber: 15\n            }, this), /*#__PURE__*/_jsxDEV(Box, {\n              sx: {\n                height: 400\n              },\n              children: /*#__PURE__*/_jsxDEV(ResponsiveContainer, {\n                children: /*#__PURE__*/_jsxDEV(BarChart, {\n                  data: userData,\n                  children: [/*#__PURE__*/_jsxDEV(CartesianGrid, {\n                    strokeDasharray: \"3 3\"\n                  }, void 0, false, {\n                    fileName: _jsxFileName,\n                    lineNumber: 212,\n                    columnNumber: 21\n                  }, this), /*#__PURE__*/_jsxDEV(XAxis, {\n                    dataKey: \"user_name\"\n                  }, void 0, false, {\n                    fileName: _jsxFileName,\n                    lineNumber: 213,\n                    columnNumber: 21\n                  }, this), /*#__PURE__*/_jsxDEV(YAxis, {}, void 0, false, {\n                    fileName: _jsxFileName,\n                    lineNumber: 214,\n                    columnNumber: 21\n                  }, this), /*#__PURE__*/_jsxDEV(Tooltip, {\n                    formatter: value => formatHours(value) + ' hours'\n                  }, void 0, false, {\n                    fileName: _jsxFileName,\n                    lineNumber: 215,\n                    columnNumber: 21\n                  }, this), /*#__PURE__*/_jsxDEV(Legend, {}, void 0, false, {\n                    fileName: _jsxFileName,\n                    lineNumber: 216,\n                    columnNumber: 21\n                  }, this), /*#__PURE__*/_jsxDEV(Bar, {\n                    dataKey: \"total_hours\",\n                    fill: \"#00C49F\",\n                    name: \"Hours\",\n                    label: {\n                      position: 'top',\n                      formatter: value => formatHours(value)\n                    }\n                  }, void 0, false, {\n                    fileName: _jsxFileName,\n                    lineNumber: 217,\n                    columnNumber: 21\n                  }, this)]\n                }, void 0, true, {\n                  fileName: _jsxFileName,\n                  lineNumber: 211,\n                  columnNumber: 19\n                }, this)\n              }, void 0, false, {\n                fileName: _jsxFileName,\n                lineNumber: 210,\n                columnNumber: 17\n              }, this)\n            }, void 0, false, {\n              fileName: _jsxFileName,\n              lineNumber: 209,\n              columnNumber: 15\n            }, this)]\n          }, void 0, true, {\n            fileName: _jsxFileName,\n            lineNumber: 205,\n            columnNumber: 13\n          }, this)\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 204,\n          columnNumber: 11\n        }, this)\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 203,\n        columnNumber: 9\n      }, this)]\n    }, void 0, true, {\n      fileName: _jsxFileName,\n      lineNumber: 144,\n      columnNumber: 7\n    }, this)]\n  }, void 0, true, {\n    fileName: _jsxFileName,\n    lineNumber: 121,\n    columnNumber: 5\n  }, this);\n}\n_s(Dashboard, \"pvc6T4iQsi8IUlMQTdQnzxqarak=\");\n_c = Dashboard;\nexport default Dashboard;\nvar _c;\n$RefreshReg$(_c, \"Dashboard\");","map":{"version":3,"names":["React","useState","useEffect","Box","Card","CardContent","Grid","Typography","MenuItem","TextField","CircularProgress","Alert","BarChart","Bar","PieChart","Pie","Cell","XAxis","YAxis","CartesianGrid","Tooltip","Legend","ResponsiveContainer","startOfWeek","startOfMonth","startOfQuarter","startOfYear","format","axios","jsxDEV","_jsxDEV","COLORS","timeRanges","value","label","Dashboard","_s","timeRange","setTimeRange","projectData","setProjectData","userData","setUserData","clientTypeData","setClientTypeData","loading","setLoading","error","setError","getDateRange","now","Date","startDate","endDate","fetchData","dateParams","console","log","projectRes","userRes","clientTypeRes","Promise","all","get","data","err","formatHours","hours","Math","round","display","justifyContent","alignItems","minHeight","children","fileName","_jsxFileName","lineNumber","columnNumber","sx","mb","variant","select","onChange","e","target","minWidth","map","option","severity","container","spacing","item","xs","md","gutterBottom","height","strokeDasharray","dataKey","formatter","fill","name","nameKey","cx","cy","outerRadius","client_type","total_hours","entry","index","length","position","_c","$RefreshReg$"],"sources":["C:/Users/golun/TimeTracker/client/src/pages/Dashboard.js"],"sourcesContent":["import React, { useState, useEffect } from 'react';\r\nimport {\r\n  Box,\r\n  Card,\r\n  CardContent,\r\n  Grid,\r\n  Typography,\r\n  MenuItem,\r\n  TextField,\r\n  CircularProgress,\r\n  Alert,\r\n} from '@mui/material';\r\nimport {\r\n  BarChart,\r\n  Bar,\r\n  PieChart,\r\n  Pie,\r\n  Cell,\r\n  XAxis,\r\n  YAxis,\r\n  CartesianGrid,\r\n  Tooltip,\r\n  Legend,\r\n  ResponsiveContainer,\r\n} from 'recharts';\r\nimport { startOfWeek, startOfMonth, startOfQuarter, startOfYear, format } from 'date-fns';\r\nimport axios from 'axios';\r\n\r\nconst COLORS = ['#0088FE', '#00C49F', '#FFBB28', '#FF8042', '#8884D8'];\r\n\r\nconst timeRanges = [\r\n  { value: 'week', label: 'This Week' },\r\n  { value: 'month', label: 'This Month' },\r\n  { value: 'quarter', label: 'This Quarter' },\r\n  { value: 'year', label: 'This Year' },\r\n  { value: 'all', label: 'All Time' },\r\n];\r\n\r\nfunction Dashboard() {\r\n  const [timeRange, setTimeRange] = useState('month');\r\n  const [projectData, setProjectData] = useState([]);\r\n  const [userData, setUserData] = useState([]);\r\n  const [clientTypeData, setClientTypeData] = useState([]);\r\n  const [loading, setLoading] = useState(true);\r\n  const [error, setError] = useState(null);\r\n\r\n  const getDateRange = () => {\r\n    const now = new Date();\r\n    let startDate;\r\n\r\n    switch (timeRange) {\r\n      case 'week':\r\n        startDate = startOfWeek(now);\r\n        break;\r\n      case 'month':\r\n        startDate = startOfMonth(now);\r\n        break;\r\n      case 'quarter':\r\n        startDate = startOfQuarter(now);\r\n        break;\r\n      case 'year':\r\n        startDate = startOfYear(now);\r\n        break;\r\n      default:\r\n        startDate = null;\r\n    }\r\n\r\n    return {\r\n      startDate: startDate ? format(startDate, 'yyyy-MM-dd') : null,\r\n      endDate: format(now, 'yyyy-MM-dd'),\r\n    };\r\n  };\r\n\r\n  const fetchData = async () => {\r\n    try {\r\n      setLoading(true);\r\n      setError(null);\r\n      const { startDate, endDate } = getDateRange();\r\n      const dateParams = startDate ? `?startDate=${startDate}&endDate=${endDate}` : '';\r\n\r\n      console.log('Fetching analytics data with params:', { startDate, endDate });\r\n\r\n      const [projectRes, userRes, clientTypeRes] = await Promise.all([\r\n        axios.get(`http://localhost:3002/api/analytics/time-by-project${dateParams}`),\r\n        axios.get(`http://localhost:3002/api/analytics/time-by-user${dateParams}`),\r\n        axios.get(`http://localhost:3002/api/analytics/time-by-client-type${dateParams}`),\r\n      ]);\r\n\r\n      console.log('Project data:', projectRes.data);\r\n      console.log('User data:', userRes.data);\r\n      console.log('Client type data:', clientTypeRes.data);\r\n\r\n      setProjectData(projectRes.data);\r\n      setUserData(userRes.data);\r\n      setClientTypeData(clientTypeRes.data);\r\n    } catch (err) {\r\n      console.error('Error fetching analytics:', err);\r\n      setError('Failed to fetch analytics data. Please try again.');\r\n    } finally {\r\n      setLoading(false);\r\n    }\r\n  };\r\n\r\n  useEffect(() => {\r\n    fetchData();\r\n  }, [timeRange]);\r\n\r\n  const formatHours = (hours) => {\r\n    return Math.round(hours * 100) / 100;\r\n  };\r\n\r\n  if (loading) {\r\n    return (\r\n      <Box display=\"flex\" justifyContent=\"center\" alignItems=\"center\" minHeight=\"60vh\">\r\n        <CircularProgress />\r\n      </Box>\r\n    );\r\n  }\r\n\r\n  return (\r\n    <Box>\r\n      <Box sx={{ display: 'flex', justifyContent: 'space-between', mb: 3 }}>\r\n        <Typography variant=\"h4\">Dashboard</Typography>\r\n        <TextField\r\n          select\r\n          value={timeRange}\r\n          onChange={(e) => setTimeRange(e.target.value)}\r\n          sx={{ minWidth: 200 }}\r\n        >\r\n          {timeRanges.map((option) => (\r\n            <MenuItem key={option.value} value={option.value}>\r\n              {option.label}\r\n            </MenuItem>\r\n          ))}\r\n        </TextField>\r\n      </Box>\r\n\r\n      {error && (\r\n        <Alert severity=\"error\" sx={{ mb: 2 }}>\r\n          {error}\r\n        </Alert>\r\n      )}\r\n\r\n      <Grid container spacing={3}>\r\n        {/* Project Hours */}\r\n        <Grid item xs={12} md={6}>\r\n          <Card>\r\n            <CardContent>\r\n              <Typography variant=\"h6\" gutterBottom>\r\n                Hours by Project\r\n              </Typography>\r\n              <Box sx={{ height: 300 }}>\r\n                <ResponsiveContainer>\r\n                  <BarChart data={projectData}>\r\n                    <CartesianGrid strokeDasharray=\"3 3\" />\r\n                    <XAxis dataKey=\"project_name\" />\r\n                    <YAxis />\r\n                    <Tooltip formatter={(value) => formatHours(value) + ' hours'} />\r\n                    <Legend />\r\n                    <Bar dataKey=\"total_hours\" fill=\"#0088FE\" name=\"Hours\" />\r\n                  </BarChart>\r\n                </ResponsiveContainer>\r\n              </Box>\r\n            </CardContent>\r\n          </Card>\r\n        </Grid>\r\n\r\n        {/* Client Type Distribution */}\r\n        <Grid item xs={12} md={6}>\r\n          <Card>\r\n            <CardContent>\r\n              <Typography variant=\"h6\" gutterBottom>\r\n                Internal vs External Hours\r\n              </Typography>\r\n              <Box sx={{ height: 300 }}>\r\n                <ResponsiveContainer>\r\n                  <PieChart>\r\n                    <Pie\r\n                      data={clientTypeData}\r\n                      dataKey=\"total_hours\"\r\n                      nameKey=\"client_type\"\r\n                      cx=\"50%\"\r\n                      cy=\"50%\"\r\n                      outerRadius={100}\r\n                      label={({ client_type, total_hours }) => \r\n                        `${client_type}: ${formatHours(total_hours)}h`\r\n                      }\r\n                    >\r\n                      {clientTypeData.map((entry, index) => (\r\n                        <Cell key={entry.client_type} fill={COLORS[index % COLORS.length]} />\r\n                      ))}\r\n                    </Pie>\r\n                    <Tooltip formatter={(value) => formatHours(value) + ' hours'} />\r\n                    <Legend />\r\n                  </PieChart>\r\n                </ResponsiveContainer>\r\n              </Box>\r\n            </CardContent>\r\n          </Card>\r\n        </Grid>\r\n\r\n        {/* User Hours */}\r\n        <Grid item xs={12}>\r\n          <Card>\r\n            <CardContent>\r\n              <Typography variant=\"h6\" gutterBottom>\r\n                Hours by User and Project\r\n              </Typography>\r\n              <Box sx={{ height: 400 }}>\r\n                <ResponsiveContainer>\r\n                  <BarChart data={userData}>\r\n                    <CartesianGrid strokeDasharray=\"3 3\" />\r\n                    <XAxis dataKey=\"user_name\" />\r\n                    <YAxis />\r\n                    <Tooltip formatter={(value) => formatHours(value) + ' hours'} />\r\n                    <Legend />\r\n                    <Bar \r\n                      dataKey=\"total_hours\" \r\n                      fill=\"#00C49F\" \r\n                      name=\"Hours\"\r\n                      label={{ \r\n                        position: 'top',\r\n                        formatter: (value) => formatHours(value)\r\n                      }}\r\n                    />\r\n                  </BarChart>\r\n                </ResponsiveContainer>\r\n              </Box>\r\n            </CardContent>\r\n          </Card>\r\n        </Grid>\r\n      </Grid>\r\n    </Box>\r\n  );\r\n}\r\n\r\nexport default Dashboard; "],"mappings":"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","ignoreList":[]},"metadata":{},"sourceType":"module","externalDependencies":[]}